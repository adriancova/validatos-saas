openapi: 3.1.0
info:
  title: Validatos - OpenAPI 3.1
  description: |-
    Validatos especificación OpenAPI 3.1 (Swagger). 
    
    Validatos ofrece múltiples api para validación de datos de identidad en latinoamérica, tales como INE o Registraduría.

    Links relevantes:
    - [Sitio web](https://validatos.io)
    - [Github sitio web](https://github.com/adriancova/validatos-saas)
    - [YAML API Validatos](https://github.com/adriancova/validatos-saas/main/static/openapi/validatos.yaml)

  contact:
    email: contacto@validatos.io
  version: 1.0.0
servers:
  - url: https://api.validatos.io
tags:
  - name: México
    description: Validación de datos para México
  - name: Colombia
    description: Validación de datos para Colombia
  - name: Chile
    description: Validación de datos para Chile
paths:
  /mex/ine:
    post:
      tags:
        - México
      summary: Validar INE
      description: Valida la vigencia de una credencial de elector en México, emitida por el Instituto Nacional Electoral (INE). 
      operationId: mxValidateIne
      requestBody:
        description: El modelo de la credencial es detectado automaticamente en base a los datos enviados, ningun dato es obligatorio pero los mínimos necesarios en base al modelo son (E => cic + idCiudadano) (D => ocr + cic) (C => claveElector + numeroEmision + ocr)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IneRequest'
        required: true
      responses:
        '200':
          description: Operación exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IneResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IneBadRequest'
      security:
        - validatos_auth:
            - read:mex
  /mex/curp:
    post:
      tags:
        - México
      summary: Validar CURP
      description: Valida la CURP de una persona y regresa los datos asociados a la misma, los cuales son -> nombre(s), primer apellido, segundo apellido, fecha de nacimiento y género.
      operationId: mxValidateCurp
      requestBody:
        description: El body requiere la CURP a validar.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurpRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - validatos_auth:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - México
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - validatos_auth:
            - write:pets
            - read:pets
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    IneRequest:
      type: object
      properties:
        ocr:
          type: string
          description: Número ocr de la credencial
          examples: [424242424]
        cic:
          type: string
          description: Código de identificación de la credencial
          examples: [424242424]
        idCiudadano:
          type: string
          description: Id Ciudadano
          examples: [424242424]
        claveElector:
          type: string
          description: Clave elector del ciudadano
          examples: [GMVLMR80070501M100]
        numeroEmision:
          type: string
          description: Número de emisión de la credencial
          examples: ["01"]
    IneResponse:
      type: object
      properties:
        ocr:
          type: string
          description: Número ocr de la credencial
          examples: [424242424]
        cic:
          type: string
          description: Código de identificación de la credencial
          examples: [424242424]
        idCiudadano:
          type: string
          description: Id Ciudadano
          examples: [424242424]
        claveElector:
          type: string
          description: Clave elector del ciudadano
          examples: [GMVLMR80070501M100]
        numeroEmision:
          type: string
          description: Número de emisión de la credencial
          examples: ["01"]
    IneBadRequest:
      type: object
      properties:
        ocr:
          type: string
          description: Número ocr de la credencial
          examples: [424242424]
        cic:
          type: string
          description: Código de identificación de la credencial
          examples: [424242424]
        idCiudadano:
          type: string
          description: Id Ciudadano
          examples: [424242424]
        claveElector:
          type: string
          description: Clave elector del ciudadano
          examples: [GMVLMR80070501M100]
        numeroEmision:
          type: string
          description: Número de emisión de la credencial
          examples: ["01"]
    CurpRequest:
      type: object
      properties:
        curp:
          type: string
          description: CURP a validar
          examples: ["PEGJ850315HJCRRN07"]
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [100000]
        username:
          type: string
          examples: [fehguy]
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          examples: [437 Lytton]
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: X-API-KEY
